<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="pathToFile" elementType="Argument">
              <stringProp name="Argument.name">pathToFile</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\Total_Request.xlsx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pathToFileDate" elementType="Argument">
              <stringProp name="Argument.name">pathToFileDate</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pathToFileLinux" elementType="Argument">
              <stringProp name="Argument.name">pathToFileLinux</stringProp>
              <stringProp name="Argument.value">/root/apache-jmeter-5.0/TestScript/Total_Request.xlsx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pathToFileDateLinux" elementType="Argument">
              <stringProp name="Argument.name">pathToFileDateLinux</stringProp>
              <stringProp name="Argument.value">/root/apache-jmeter-5.0/TestScript/</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="1.getChildrenContent" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="pathToFile" elementType="Argument">
              <stringProp name="Argument.name">pathToFile</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\Total_Request.xlsx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pathToFileDate" elementType="Argument">
              <stringProp name="Argument.name">pathToFileDate</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（读取excel文件）" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

XSSFWorkbook book = &quot;&quot;; 
try { 
//	InputStream inputStream = new FileInputStream(new File(&quot;${pathToFile}&quot;)); 
	InputStream inputStream = new FileInputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	book = new XSSFWorkbook(inputStream); 	
	inputStream.close(); 
} catch (Exception e) { 
		log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); 
} 
if (!book.equals(&quot;&quot;)) { 
	vars.putObject(&quot;book&quot;, book); 
} else { 
	SampleResult.setStopTestNow(true); 
}

SampleResult.setIgnore();
</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${stopWhile}&quot; != &quot;OK&quot;)} 
</stringProp>
        </WhileController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter（实现excel中多用例执行）" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">counter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（定义excel中文件变量用于接口拼接）" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 

XSSFRow row = vars.getObject(&quot;book&quot;).getSheetAt(0).getRow(i); 
vars.putObject(&quot;row&quot;, row); 

	for (int j = 1; j &lt;= vars.getObject(&quot;book&quot;).getSheetAt(0).getRow(0).getLastCellNum(); j++) {
		if (row.getCell(j) == null) { 
			row.createCell(j).setCellValue(&quot;&quot;); 
		} 
	} 
	String parentid = row.getCell(1).toString(); 
	vars.put(&quot;parentid&quot;,parentid); 
	String plats = row.getCell(2).toString(); 
	vars.put(&quot;plats&quot;,plats); 
	String psize = row.getCell(3).toString(); 
	vars.put(&quot;psize&quot;,psize); 
	String orderby = row.getCell(4).toString(); 
	vars.put(&quot;orderby&quot;,orderby); 
	String showOnNewTysx = row.getCell(5).toString(); 
	vars.put(&quot;showOnNewTysx&quot;,showOnNewTysx); 
	String partnerIds = row.getCell(6).toString(); 
	vars.put(&quot;partnerIds&quot;,partnerIds); 
	String attrs = row.getCell(7).toString(); 
	vars.put(&quot;attrs&quot;,attrs); 
	String expectedResult = row.getCell(10).toString(); 
	vars.put(&quot;expectedResult&quot;,expectedResult);

SampleResult.setIgnore();
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request getChildrenContent" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="parentid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${parentid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">parentid</stringProp>
                </elementProp>
                <elementProp name="plats" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${plats}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">plats</stringProp>
                </elementProp>
                <elementProp name="psize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${psize}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">psize</stringProp>
                </elementProp>
                <elementProp name="orderby" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">30</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">orderby</stringProp>
                </elementProp>
                <elementProp name="partnerIds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${partnerIds}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">partnerIds</stringProp>
                </elementProp>
                <elementProp name="attrs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${attrs}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">attrs</stringProp>
                </elementProp>
                <elementProp name="showOnNewTysx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${showOnNewTysx}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">showOnNewTysx</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">//192.168.23.173:26001/cps/service/cms/getChildrenContent?</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion（判断status）" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import java.io.IOException; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 

String requestToApi = SampleResult.getSamplerData(); 
String responseFromApi = SampleResult.getResponseDataAsString(); 
String status = null; 

if ((responseFromApi).contains(vars.get(&quot;expectedResult&quot;))) { status = &quot;Passed&quot;; } 
//if (vars.get(&quot;expectedResult&quot;).equals(responseFromApi)) { status = &quot;Passed&quot;; } 
else {status = &quot;Failed&quot;;Failure=true;} 

vars.getObject(&quot;row&quot;).createCell(8).setCellValue(requestToApi); //save to excel row 8 named Request
vars.getObject(&quot;row&quot;).createCell(9).setCellValue(responseFromApi);// save to excel row 9 named Actual Result
vars.getObject(&quot;row&quot;).createCell(11).setCellValue(status); //save to excel row 11 named Status

String stopWhile = null; 
int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 
if (i &gt;= vars.getObject(&quot;book&quot;).getSheetAt(0).getLastRowNum()) //according to sheet1
{
		stopWhile = &quot;OK&quot;; 
		vars.put(&quot;stopWhile&quot;,stopWhile); 
}

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler3（保存更新excel文件）" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

import java.text.SimpleDateFormat;
import java.util.Date;

try 
{ 
//FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFile}&quot;)); 
	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	vars.getObject(&quot;book&quot;).write(out); 
	vars.getObject(&quot;book&quot;).close();
	
} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

//try 
//{ 
//	Date day=new Date();    
  //   String fileName = new SimpleDateFormat(&quot;&apos;Total_Request&apos;yyyyMMddHHmm&apos;.xlsx&apos;&quot;).format(new Date());
//	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileDate}&quot;+fileName)); 
//	vars.getObject(&quot;book&quot;).write(out); 
//	vars.getObject(&quot;book&quot;).close();
	
//} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

SampleResult.setIgnore();

</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="2.queryContents" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="pathToFile" elementType="Argument">
              <stringProp name="Argument.name">pathToFile</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\Total_Request.xlsx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pathToFileDate" elementType="Argument">
              <stringProp name="Argument.name">pathToFileDate</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（读取excel文件）" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

XSSFWorkbook book = &quot;&quot;; 
try { 
	InputStream inputStream = new FileInputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	book = new XSSFWorkbook(inputStream); 	
	inputStream.close(); 
} catch (Exception e) { 
		log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); 
} 
if (!book.equals(&quot;&quot;)) { 
	vars.putObject(&quot;book&quot;, book); 
} else { 
	SampleResult.setStopTestNow(true); 
}

SampleResult.setIgnore();
</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${stopWhile}&quot; != &quot;OK&quot;)} 
</stringProp>
        </WhileController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter（实现excel中多用例执行）" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">counter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（定义excel中文件变量用于接口拼接）" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 

XSSFRow row = vars.getObject(&quot;book&quot;).getSheetAt(1).getRow(i); 
vars.putObject(&quot;row&quot;, row); 

	for (int j = 1; j &lt;= vars.getObject(&quot;book&quot;).getSheetAt(1).getRow(0).getLastCellNum(); j++) {
		if (row.getCell(j) == null) { 
			row.createCell(j).setCellValue(&quot;&quot;); 
		} 
	} 
	String pno = row.getCell(1).toString(); 
	vars.put(&quot;pno&quot;,pno); 
	String psize = row.getCell(2).toString(); 
	vars.put(&quot;psize&quot;,psize); 
	String pageNo = row.getCell(3).toString(); 
	vars.put(&quot;pageNo&quot;,pageNo); 
	String showOnNewTysx = row.getCell(4).toString(); 
	vars.put(&quot;showOnNewTysx&quot;,showOnNewTysx); 
	String plats = row.getCell(5).toString(); 
	vars.put(&quot;plats&quot;,plats); 
	String productId = row.getCell(6).toString(); 
	vars.put(&quot;productId&quot;,productId);
	String categoryname = row.getCell(7).toString(); 
	vars.put(&quot;categoryname&quot;,categoryname);
	String vqCodes = row.getCell(8).toString(); 
	vars.put(&quot;vqCodes&quot;,vqCodes);
	String contenttype = row.getCell(9).toString(); 
	vars.put(&quot;contenttype&quot;,contenttype);
	String channelid = row.getCell(10).toString(); 
	vars.put(&quot;channelid&quot;,channelid);
	String attrs = row.getCell(11).toString(); 
	vars.put(&quot;attrs&quot;,attrs);	

	String expectedResult = row.getCell(14).toString(); 
	vars.put(&quot;expectedResult&quot;,expectedResult);

SampleResult.setIgnore();
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request queryContents" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="pno" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${pno}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">pno</stringProp>
                </elementProp>
                <elementProp name="psize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${psize}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">psize</stringProp>
                </elementProp>
                <elementProp name="pageNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${pageNo}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">pageNo</stringProp>
                </elementProp>
                <elementProp name="showOnNewTysx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${showOnNewTysx}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">showOnNewTysx</stringProp>
                </elementProp>
                <elementProp name="plats" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${plats}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">plats</stringProp>
                </elementProp>
                <elementProp name="productId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${productId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">productId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">//192.168.23.173:26001/cps/service/cms/queryContents?</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion（判断status）" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import java.io.IOException; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 

String requestToApi = SampleResult.getSamplerData(); 
String responseFromApi = SampleResult.getResponseDataAsString(); 
String status = null; 

if ((responseFromApi).contains(vars.get(&quot;expectedResult&quot;))) { status = &quot;Passed&quot;; }
else {status = &quot;Failed&quot;;Failure=true;} 

vars.getObject(&quot;row&quot;).createCell(12).setCellValue(requestToApi); 
vars.getObject(&quot;row&quot;).createCell(13).setCellValue(responseFromApi); 
vars.getObject(&quot;row&quot;).createCell(15).setCellValue(status); 

String stopWhile = null; 
int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 
if (i &gt;= vars.getObject(&quot;book&quot;).getSheetAt(1).getLastRowNum()) { stopWhile = &quot;OK&quot;; vars.put(&quot;stopWhile&quot;,stopWhile); }

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler3（保存更新excel文件）" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

import java.text.SimpleDateFormat;
import java.util.Date;
try 
{ 
	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	vars.getObject(&quot;book&quot;).write(out); 
	vars.getObject(&quot;book&quot;).close();
	
} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

//try 
//{ 
//	Date day=new Date();    
  //   String fileName = new SimpleDateFormat(&quot;&apos;Total_Request&apos;yyyyMMddHHmm&apos;.xlsx&apos;&quot;).format(new Date());
//	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileDate}&quot;+fileName)); 
//	vars.getObject(&quot;book&quot;).write(out); 
//	vars.getObject(&quot;book&quot;).close();
	
//} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

SampleResult.setIgnore();</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="3.querySubContents" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="pathToFile" elementType="Argument">
              <stringProp name="Argument.name">pathToFile</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\Total_Request.xlsx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pathToFileDate" elementType="Argument">
              <stringProp name="Argument.name">pathToFileDate</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（读取excel文件）" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

XSSFWorkbook book = &quot;&quot;; 
try { 
	InputStream inputStream = new FileInputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	book = new XSSFWorkbook(inputStream); 	
	inputStream.close(); 
} catch (Exception e) { 
		log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); 
} 
if (!book.equals(&quot;&quot;)) { 
	vars.putObject(&quot;book&quot;, book); 
} else { 
	SampleResult.setStopTestNow(true); 
}

SampleResult.setIgnore();
</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${stopWhile}&quot; != &quot;OK&quot;)} 
</stringProp>
        </WhileController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter（实现excel中多用例执行）" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">counter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（定义excel中文件变量用于接口拼接）" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 

XSSFRow row = vars.getObject(&quot;book&quot;).getSheetAt(2).getRow(i); 
vars.putObject(&quot;row&quot;, row); 

	for (int j = 1; j &lt;= vars.getObject(&quot;book&quot;).getSheetAt(2).getRow(0).getLastCellNum(); j++) {
		if (row.getCell(j) == null) { 
			row.createCell(j).setCellValue(&quot;&quot;); 
		} 
	} 

	String parentid = row.getCell(1).toString(); 
	vars.put(&quot;parentid&quot;,parentid); 
	
	String pno = row.getCell(2).toString(); 
	vars.put(&quot;pno&quot;,pno); 
	
	String psize = row.getCell(3).toString(); 
	vars.put(&quot;psize&quot;,psize); 

	String orderby = row.getCell(4).toString(); 
	vars.put(&quot;orderby&quot;,orderby); 
	
	String attrs = row.getCell(5).toString(); 
	vars.put(&quot;attrs&quot;,attrs); 

	String expectedResult = row.getCell(8).toString(); 
	vars.put(&quot;expectedResult&quot;,expectedResult);

SampleResult.setIgnore();</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request querySubContents" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="parentid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${parentid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">parentid</stringProp>
                </elementProp>
                <elementProp name="pno" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${pno}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">pno</stringProp>
                </elementProp>
                <elementProp name="psize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${psize}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">psize</stringProp>
                </elementProp>
                <elementProp name="orderby" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${orderby}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">orderby</stringProp>
                </elementProp>
                <elementProp name="attrs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${attrs}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">attrs</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">//192.168.23.173:26001/cps/service/cms/querySubContents?</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion（判断status）" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import java.io.IOException; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 

String requestToApi = SampleResult.getSamplerData(); 
String responseFromApi = SampleResult.getResponseDataAsString(); 
String status = null; 

if ((responseFromApi).contains(vars.get(&quot;expectedResult&quot;))) { status = &quot;Passed&quot;; }
else {status = &quot;Failed&quot;;Failure=true;} 

vars.getObject(&quot;row&quot;).createCell(6).setCellValue(requestToApi); 
vars.getObject(&quot;row&quot;).createCell(7).setCellValue(responseFromApi); 
vars.getObject(&quot;row&quot;).createCell(9).setCellValue(status); 

String stopWhile = null; 
int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 
if (i &gt;= vars.getObject(&quot;book&quot;).getSheetAt(2).getLastRowNum()) { stopWhile = &quot;OK&quot;; vars.put(&quot;stopWhile&quot;,stopWhile); }

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler3（保存更新excel文件）" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

import java.text.SimpleDateFormat;
import java.util.Date;
try 
{ 
	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	vars.getObject(&quot;book&quot;).write(out); 
	vars.getObject(&quot;book&quot;).close();
	
} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

//try 
//{ 
//	Date day=new Date();    
  //   String fileName = new SimpleDateFormat(&quot;&apos;Total_Request&apos;yyyyMMddHHmm&apos;.xlsx&apos;&quot;).format(new Date());
//	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileDate}&quot;+fileName)); 
//	vars.getObject(&quot;book&quot;).write(out); 
//	vars.getObject(&quot;book&quot;).close();
	
//} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

SampleResult.setIgnore();</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="4.solrSearchAssociates" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="pathToFile" elementType="Argument">
              <stringProp name="Argument.name">pathToFile</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\Total_Request.xlsx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pathToFileDate" elementType="Argument">
              <stringProp name="Argument.name">pathToFileDate</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（读取excel文件）" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

XSSFWorkbook book = &quot;&quot;; 
try { 
	InputStream inputStream = new FileInputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	book = new XSSFWorkbook(inputStream); 	
	inputStream.close(); 
} catch (Exception e) { 
		log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); 
} 
if (!book.equals(&quot;&quot;)) { 
	vars.putObject(&quot;book&quot;, book); 
} else { 
	SampleResult.setStopTestNow(true); 
}

SampleResult.setIgnore();
</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${stopWhile}&quot; != &quot;OK&quot;)} 
</stringProp>
        </WhileController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter（实现excel中多用例执行）" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">counter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（定义excel中文件变量用于接口拼接）" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 

XSSFRow row = vars.getObject(&quot;book&quot;).getSheetAt(3).getRow(i); 
vars.putObject(&quot;row&quot;, row); 

	for (int j = 1; j &lt;= vars.getObject(&quot;book&quot;).getSheetAt(3).getRow(0).getLastCellNum(); j++) {
		if (row.getCell(j) == null) { 
			row.createCell(j).setCellValue(&quot;&quot;); 
		} 
	} 
	String name = row.getCell(1).toString(); 
	vars.put(&quot;name&quot;,name); 

	String showOnNewTysx = row.getCell(2).toString(); 
	vars.put(&quot;showOnNewTysx&quot;,showOnNewTysx); 

	String productId = row.getCell(3).toString(); 
	vars.put(&quot;productId&quot;,productId); 

	String maskLiveId = row.getCell(4).toString(); 
	vars.put(&quot;maskLiveId&quot;,maskLiveId); 

	String version = row.getCell(5).toString(); 
	vars.put(&quot;version&quot;,version); 

	String websiteType = row.getCell(6).toString(); 
	vars.put(&quot;websiteType&quot;,websiteType); 


	String expectedResult = row.getCell(9).toString(); 
	vars.put(&quot;expectedResult&quot;,expectedResult);
SampleResult.setIgnore();

</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request solrSearchAssociates" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${name}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">name</stringProp>
                </elementProp>
                <elementProp name="showOnNewTysx" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${showOnNewTysx}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">showOnNewTysx</stringProp>
                </elementProp>
                <elementProp name="productId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${productId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">productId</stringProp>
                </elementProp>
                <elementProp name="maskLiveId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${maskLiveId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">maskLiveId</stringProp>
                </elementProp>
                <elementProp name="version" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">version</stringProp>
                </elementProp>
                <elementProp name="websiteType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${websiteType}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">websiteType</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">//192.168.23.173:26001/cps/service/cms/solrSearchAssociates?</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion（判断status）" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import java.io.IOException; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 

String requestToApi = SampleResult.getSamplerData(); 
String responseFromApi = SampleResult.getResponseDataAsString(); 
String status = null; 

if ((responseFromApi).contains(vars.get(&quot;expectedResult&quot;))) { status = &quot;Passed&quot;; }
else {status = &quot;Failed&quot;;Failure=true;} 
 
vars.getObject(&quot;row&quot;).createCell(7).setCellValue(requestToApi); 
vars.getObject(&quot;row&quot;).createCell(8).setCellValue(responseFromApi); 
vars.getObject(&quot;row&quot;).createCell(10).setCellValue(status); 

String stopWhile = null; 
int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 
if (i &gt;= vars.getObject(&quot;book&quot;).getSheetAt(3).getLastRowNum()) { stopWhile = &quot;OK&quot;; vars.put(&quot;stopWhile&quot;,stopWhile); }

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler3（保存更新excel文件）" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

import java.text.SimpleDateFormat;
import java.util.Date;
try 
{ 
	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	vars.getObject(&quot;book&quot;).write(out); 
	vars.getObject(&quot;book&quot;).close();
	
} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

//try 
//{ 
//	Date day=new Date();    
  //   String fileName = new SimpleDateFormat(&quot;&apos;Total_Request&apos;yyyyMMddHHmm&apos;.xlsx&apos;&quot;).format(new Date());
//	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileDate}&quot;+fileName)); 
//	vars.getObject(&quot;book&quot;).write(out); 
//	vars.getObject(&quot;book&quot;).close();
	
//} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

SampleResult.setIgnore();</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="5.solrSearchContents" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="pathToFile" elementType="Argument">
              <stringProp name="Argument.name">pathToFile</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\Total_Request.xlsx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pathToFileDate" elementType="Argument">
              <stringProp name="Argument.name">pathToFileDate</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（读取excel文件）" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

XSSFWorkbook book = &quot;&quot;; 
try { 
	InputStream inputStream = new FileInputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	book = new XSSFWorkbook(inputStream); 	
	inputStream.close(); 
} catch (Exception e) { 
		log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); 
} 
if (!book.equals(&quot;&quot;)) { 
	vars.putObject(&quot;book&quot;, book); 
} else { 
	SampleResult.setStopTestNow(true); 
}
SampleResult.setIgnore();

</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${stopWhile}&quot; != &quot;OK&quot;)} 
</stringProp>
        </WhileController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter（实现excel中多用例执行）" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">counter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（定义excel中文件变量用于接口拼接）" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 

XSSFRow row = vars.getObject(&quot;book&quot;).getSheetAt(4).getRow(i); 
vars.putObject(&quot;row&quot;, row); 

	for (int j = 1; j &lt;= vars.getObject(&quot;book&quot;).getSheetAt(4).getRow(0).getLastCellNum(); j++) {
		if (row.getCell(j) == null) { 
			row.createCell(j).setCellValue(&quot;&quot;); 
		} 
	} 
	String q = row.getCell(1).toString(); 
	vars.put(&quot;q&quot;,q); 

	String pno = row.getCell(2).toString(); 
	vars.put(&quot;pno&quot;,pno); 

	String psize = row.getCell(3).toString(); 
	vars.put(&quot;psize&quot;,psize); 

	String orderby = row.getCell(4).toString(); 
	vars.put(&quot;orderby&quot;,orderby); 

	String sourceType = row.getCell(5).toString(); 
	vars.put(&quot;sourceType&quot;,sourceType); 

	String attrs = row.getCell(6).toString(); 
	vars.put(&quot;attrs&quot;,attrs); 


	String expectedResult = row.getCell(9).toString(); 
	vars.put(&quot;expectedResult&quot;,expectedResult);
	SampleResult.setIgnore();</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request solrSearchContents" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="q" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${q}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">q</stringProp>
                </elementProp>
                <elementProp name="pno" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${pno}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">pno</stringProp>
                </elementProp>
                <elementProp name="psize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${psize}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">psize</stringProp>
                </elementProp>
                <elementProp name="orderby" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${orderby}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">orderby</stringProp>
                </elementProp>
                <elementProp name="sourceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${sourceType}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sourceType</stringProp>
                </elementProp>
                <elementProp name="attrs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${sourceType}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">attrs</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">//192.168.23.173:26001/cps/service/cms/solrSearchContents?</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion（判断status）" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import java.io.IOException; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 

String requestToApi = SampleResult.getSamplerData(); 
String responseFromApi = SampleResult.getResponseDataAsString(); 
String status = null; 

if ((responseFromApi).contains(vars.get(&quot;expectedResult&quot;))) { status = &quot;Passed&quot;; }
else {status = &quot;Failed&quot;;Failure=true;} 

vars.getObject(&quot;row&quot;).createCell(7).setCellValue(requestToApi); 
vars.getObject(&quot;row&quot;).createCell(8).setCellValue(responseFromApi); 
vars.getObject(&quot;row&quot;).createCell(10).setCellValue(status); 

String stopWhile = null; 
int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 
if (i &gt;= vars.getObject(&quot;book&quot;).getSheetAt(4).getLastRowNum()) { stopWhile = &quot;OK&quot;; vars.put(&quot;stopWhile&quot;,stopWhile); }

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler3（保存更新excel文件）" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

import java.text.SimpleDateFormat;
import java.util.Date;
try 
{ 
	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	vars.getObject(&quot;book&quot;).write(out); 
	vars.getObject(&quot;book&quot;).close();
	
} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

//try 
//{ 
//	Date day=new Date();    
  //   String fileName = new SimpleDateFormat(&quot;&apos;Total_Request&apos;yyyyMMddHHmm&apos;.xlsx&apos;&quot;).format(new Date());
//	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileDate}&quot;+fileName)); 
//	vars.getObject(&quot;book&quot;).write(out); 
//	vars.getObject(&quot;book&quot;).close();
	
//} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

SampleResult.setIgnore();</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="6.solrSearchContentsNew" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="pathToFile" elementType="Argument">
              <stringProp name="Argument.name">pathToFile</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\Total_Request.xlsx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pathToFileDate" elementType="Argument">
              <stringProp name="Argument.name">pathToFileDate</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（读取excel文件）" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

XSSFWorkbook book = &quot;&quot;; 
try { 
	InputStream inputStream = new FileInputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	book = new XSSFWorkbook(inputStream); 	
	inputStream.close(); 
} catch (Exception e) { 
		log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); 
} 
if (!book.equals(&quot;&quot;)) { 
	vars.putObject(&quot;book&quot;, book); 
} else { 
	SampleResult.setStopTestNow(true); 
}

SampleResult.setIgnore();
</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${stopWhile}&quot; != &quot;OK&quot;)} 
</stringProp>
        </WhileController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter（实现excel中多用例执行）" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">counter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（定义excel中文件变量用于接口拼接）" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 

XSSFRow row = vars.getObject(&quot;book&quot;).getSheetAt(5).getRow(i); 
vars.putObject(&quot;row&quot;, row); 

	for (int j = 1; j &lt;= vars.getObject(&quot;book&quot;).getSheetAt(5).getRow(0).getLastCellNum(); j++) {
		if (row.getCell(j) == null) { 
			row.createCell(j).setCellValue(&quot;&quot;); 
		} 
	} 
	String name = row.getCell(1).toString(); 
	vars.put(&quot;name&quot;,name); 

	String pno = row.getCell(2).toString(); 
	vars.put(&quot;pno&quot;,pno); 

	String psize = row.getCell(3).toString(); 
	vars.put(&quot;psize&quot;,psize); 

	String appId = row.getCell(4).toString(); 
	vars.put(&quot;appId&quot;,appId); 

	String q = row.getCell(5).toString(); 
	vars.put(&quot;q&quot;,q); 

	String facet = row.getCell(6).toString(); 
	vars.put(&quot;facet&quot;,facet); 

	String attrs = row.getCell(7).toString(); 
	vars.put(&quot;attrs&quot;,attrs); 

	String eggpain = row.getCell(8).toString(); 
	vars.put(&quot;eggpain&quot;,eggpain); 

	String type = row.getCell(9).toString(); 
	vars.put(&quot;type&quot;,type); 
	
	String isTop = row.getCell(10).toString(); 
	vars.put(&quot;isTop&quot;,isTop); 	

	String contentMode = row.getCell(11).toString(); 
	vars.put(&quot;contentMode&quot;,contentMode); 
	
	String liveQ = row.getCell(12).toString(); 
	vars.put(&quot;liveQ&quot;,liveQ); 

	String hl = row.getCell(13).toString(); 
	vars.put(&quot;hl&quot;,hl); 

	String cstype = row.getCell(14).toString(); 
	vars.put(&quot;cstype&quot;,cstype); 

	String expectedResult = row.getCell(17).toString(); 
	vars.put(&quot;expectedResult&quot;,expectedResult);
SampleResult.setIgnore();



</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request solrSearchContentsNew" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${name}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">name</stringProp>
                </elementProp>
                <elementProp name="pno" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${pno}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">pno</stringProp>
                </elementProp>
                <elementProp name="psize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${psize}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">psize</stringProp>
                </elementProp>
                <elementProp name="appId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${appId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">appId</stringProp>
                </elementProp>
                <elementProp name="q" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${q}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">q</stringProp>
                </elementProp>
                <elementProp name="facet" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${facet}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">facet</stringProp>
                </elementProp>
                <elementProp name="attrs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${attrs}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">attrs</stringProp>
                </elementProp>
                <elementProp name="eggpain" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${eggpain}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">eggpain</stringProp>
                </elementProp>
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${type}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                </elementProp>
                <elementProp name="isTop" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${isTop}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isTop</stringProp>
                </elementProp>
                <elementProp name="contentMode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${contentMode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">contentMode</stringProp>
                </elementProp>
                <elementProp name="liveQ" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${liveQ}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">liveQ</stringProp>
                </elementProp>
                <elementProp name="hl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${hl}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hl</stringProp>
                </elementProp>
                <elementProp name="cstype" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${cstype}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">cstype</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">//192.168.23.173:26001/cps/service/cms/solrSearchContentsNew?</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion（判断status）" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import java.io.IOException; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 

String requestToApi = SampleResult.getSamplerData(); 
String responseFromApi = SampleResult.getResponseDataAsString(); 
String status = null; 

if ((responseFromApi).contains(vars.get(&quot;expectedResult&quot;))) { status = &quot;Passed&quot;; }
else {status = &quot;Failed&quot;;Failure=true;} 

vars.getObject(&quot;row&quot;).createCell(15).setCellValue(requestToApi); 
vars.getObject(&quot;row&quot;).createCell(16).setCellValue(responseFromApi); 
vars.getObject(&quot;row&quot;).createCell(18).setCellValue(status); 

String stopWhile = null; 
int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 
if (i &gt;= vars.getObject(&quot;book&quot;).getSheetAt(5).getLastRowNum()) { stopWhile = &quot;OK&quot;; vars.put(&quot;stopWhile&quot;,stopWhile); }

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler3（保存更新excel文件）" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

import java.text.SimpleDateFormat;
import java.util.Date;
try 
{ 
	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	vars.getObject(&quot;book&quot;).write(out); 
	vars.getObject(&quot;book&quot;).close();
	
} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

//try 
//{ 
//	Date day=new Date();    
  //   String fileName = new SimpleDateFormat(&quot;&apos;Total_Request&apos;yyyyMMddHHmm&apos;.xlsx&apos;&quot;).format(new Date());
//	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileDate}&quot;+fileName)); 
//	vars.getObject(&quot;book&quot;).write(out); 
//	vars.getObject(&quot;book&quot;).close();
	
//} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

SampleResult.setIgnore();</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="7.getVideoPlayInfo" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="pathToFile" elementType="Argument">
              <stringProp name="Argument.name">pathToFile</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\Total_Request.xlsx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pathToFileDate" elementType="Argument">
              <stringProp name="Argument.name">pathToFileDate</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（读取excel文件）" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

XSSFWorkbook book = &quot;&quot;; 
try { 
	InputStream inputStream = new FileInputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	book = new XSSFWorkbook(inputStream); 	
	inputStream.close(); 
} catch (Exception e) { 
		log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); 
} 
if (!book.equals(&quot;&quot;)) { 
	vars.putObject(&quot;book&quot;, book); 
} else { 
	SampleResult.setStopTestNow(true); 
}

SampleResult.setIgnore();
</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${stopWhile}&quot; != &quot;OK&quot;)} 
</stringProp>
        </WhileController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter（实现excel中多用例执行）" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">counter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">true</boolProp>
          </CounterConfig>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（定义excel中文件变量用于接口拼接）" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 

XSSFRow row = vars.getObject(&quot;book&quot;).getSheetAt(6).getRow(i); 
vars.putObject(&quot;row&quot;, row); 

	for (int j = 1; j &lt;= vars.getObject(&quot;book&quot;).getSheetAt(6).getRow(0).getLastCellNum(); j++) {
		if (row.getCell(j) == null) { 
			row.createCell(j).setCellValue(&quot;&quot;); 
		} 
	} 
	String id = row.getCell(1).toString(); 
	vars.put(&quot;id&quot;,id); 

	String plat = row.getCell(2).toString(); 
	vars.put(&quot;plat&quot;,plat); 

	String indexid = row.getCell(3).toString(); 
	vars.put(&quot;indexid&quot;,indexid); 

	String cdntype = row.getCell(4).toString(); 
	vars.put(&quot;cdntype&quot;,cdntype); 

	String isTryLook = row.getCell(5).toString(); 
	vars.put(&quot;isTryLook&quot;,isTryLook); 

	String expectedResult = row.getCell(8).toString(); 
	vars.put(&quot;expectedResult&quot;,expectedResult);

	SampleResult.setIgnore();</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request getVideoPlayInfo" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                </elementProp>
                <elementProp name="plat" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${plat}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">plat</stringProp>
                </elementProp>
                <elementProp name="indexid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${indexid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">indexid</stringProp>
                </elementProp>
                <elementProp name="cdntype" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${cdntype}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">cdntype</stringProp>
                </elementProp>
                <elementProp name="isTryLook" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${isTryLook}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isTryLook</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">//192.168.23.173:26001/cps/service/cms/getVideoPlayInfo?</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion（判断status）" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import java.io.IOException; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 

String requestToApi = SampleResult.getSamplerData(); 
String responseFromApi = SampleResult.getResponseDataAsString(); 
String status = null; 

if ((responseFromApi).contains(vars.get(&quot;expectedResult&quot;))) { status = &quot;Passed&quot;; }
else {status = &quot;Failed&quot;;Failure=true;} 

vars.getObject(&quot;row&quot;).createCell(6).setCellValue(requestToApi); 
vars.getObject(&quot;row&quot;).createCell(7).setCellValue(responseFromApi); 
vars.getObject(&quot;row&quot;).createCell(9).setCellValue(status); 

String stopWhile = null; 
int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 
if (i &gt;= vars.getObject(&quot;book&quot;).getSheetAt(6).getLastRowNum()) { stopWhile = &quot;OK&quot;; vars.put(&quot;stopWhile&quot;,stopWhile); }

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler3（保存更新excel文件）" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

import java.text.SimpleDateFormat;
import java.util.Date;
try 
{ 
	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	vars.getObject(&quot;book&quot;).write(out); 
	vars.getObject(&quot;book&quot;).close();
	
} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

//try 
//{ 
//	Date day=new Date();    
  //   String fileName = new SimpleDateFormat(&quot;&apos;Total_Request&apos;yyyyMMddHHmm&apos;.xlsx&apos;&quot;).format(new Date());
//	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileDate}&quot;+fileName)); 
//	vars.getObject(&quot;book&quot;).write(out); 
//	vars.getObject(&quot;book&quot;).close();
	
//} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

SampleResult.setIgnore();</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="8.getLiveChannels" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="pathToFile" elementType="Argument">
              <stringProp name="Argument.name">pathToFile</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\Total_Request.xlsx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pathToFileDate" elementType="Argument">
              <stringProp name="Argument.name">pathToFileDate</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（读取excel文件）" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

XSSFWorkbook book = &quot;&quot;; 
try { 
	InputStream inputStream = new FileInputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	book = new XSSFWorkbook(inputStream); 	
	inputStream.close(); 
} catch (Exception e) { 
		log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); 
} 
if (!book.equals(&quot;&quot;)) { 
	vars.putObject(&quot;book&quot;, book); 
} else { 
	SampleResult.setStopTestNow(true); 
}

SampleResult.setIgnore();

</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${stopWhile}&quot; != &quot;OK&quot;)} 
</stringProp>
        </WhileController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter（实现excel中多用例执行）" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">counter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">true</boolProp>
          </CounterConfig>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（定义excel中文件变量用于接口拼接）" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 

XSSFRow row = vars.getObject(&quot;book&quot;).getSheetAt(7).getRow(i); 
vars.putObject(&quot;row&quot;, row); 

	for (int j = 1; j &lt;= vars.getObject(&quot;book&quot;).getSheetAt(7).getRow(0).getLastCellNum(); j++) {
		if (row.getCell(j) == null) { 
			row.createCell(j).setCellValue(&quot;&quot;); 
		} 
	} 
	String liveids = row.getCell(1).toString(); 
	vars.put(&quot;liveids&quot;,liveids); 

	String expectedResult = row.getCell(4).toString(); 
	vars.put(&quot;expectedResult&quot;,expectedResult);

	SampleResult.setIgnore();</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request getLiveChannels" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="liveids" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${liveids}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">liveids</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">//192.168.23.173:26001/cps/service/cms/getLiveChannels?</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion（判断status）" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import java.io.IOException; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 

String requestToApi = SampleResult.getSamplerData(); 
String responseFromApi = SampleResult.getResponseDataAsString(); 
String status = null; 

if ((responseFromApi).contains(vars.get(&quot;expectedResult&quot;))) { status = &quot;Passed&quot;; }
else {status = &quot;Failed&quot;;Failure=true;} 

vars.getObject(&quot;row&quot;).createCell(2).setCellValue(requestToApi); 
vars.getObject(&quot;row&quot;).createCell(3).setCellValue(responseFromApi); 
vars.getObject(&quot;row&quot;).createCell(5).setCellValue(status); 

String stopWhile = null; 
int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 
if (i &gt;= vars.getObject(&quot;book&quot;).getSheetAt(7).getLastRowNum()) { stopWhile = &quot;OK&quot;; vars.put(&quot;stopWhile&quot;,stopWhile); }

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler3（保存更新excel文件）" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

import java.text.SimpleDateFormat;
import java.util.Date;
try 
{ 
	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	vars.getObject(&quot;book&quot;).write(out); 
	vars.getObject(&quot;book&quot;).close();
	
} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

//try 
//{ 
//	Date day=new Date();    
  //   String fileName = new SimpleDateFormat(&quot;&apos;Total_Request&apos;yyyyMMddHHmm&apos;.xlsx&apos;&quot;).format(new Date());
//	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileDate}&quot;+fileName)); 
//	vars.getObject(&quot;book&quot;).write(out); 
//	vars.getObject(&quot;book&quot;).close();
	
//} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

SampleResult.setIgnore();</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="9.getLivePlayInfo" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="pathToFile" elementType="Argument">
              <stringProp name="Argument.name">pathToFile</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\Total_Request.xlsx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pathToFileDate" elementType="Argument">
              <stringProp name="Argument.name">pathToFileDate</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（读取excel文件）" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

XSSFWorkbook book = &quot;&quot;; 
try { 
	InputStream inputStream = new FileInputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	book = new XSSFWorkbook(inputStream); 	
	inputStream.close(); 
} catch (Exception e) { 
		log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); 
} 
if (!book.equals(&quot;&quot;)) { 
	vars.putObject(&quot;book&quot;, book); 
} else { 
	SampleResult.setStopTestNow(true); 
}

SampleResult.setIgnore();
</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${stopWhile}&quot; != &quot;OK&quot;)} 
</stringProp>
        </WhileController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter（实现excel中多用例执行）" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">counter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">true</boolProp>
          </CounterConfig>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（定义excel中文件变量用于接口拼接）" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 

XSSFRow row = vars.getObject(&quot;book&quot;).getSheetAt(8).getRow(i); 
vars.putObject(&quot;row&quot;, row); 

	for (int j = 1; j &lt;= vars.getObject(&quot;book&quot;).getSheetAt(8).getRow(0).getLastCellNum(); j++) {
		if (row.getCell(j) == null) { 
			row.createCell(j).setCellValue(&quot;&quot;); 
		} 
	} 
	String liveid = row.getCell(1).toString(); 
	vars.put(&quot;liveid&quot;,liveid); 
		
	String plat = row.getCell(2).toString(); 
	vars.put(&quot;plat&quot;,plat); 
	
	String protocols = row.getCell(3).toString(); 
	vars.put(&quot;protocols&quot;,protocols); 

	String expectedResult = row.getCell(6).toString(); 
	vars.put(&quot;expectedResult&quot;,expectedResult);
SampleResult.setIgnore();</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request getLivePlayInfo" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="liveid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${liveid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">liveid</stringProp>
                </elementProp>
                <elementProp name="plat" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${plat}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">plat</stringProp>
                </elementProp>
                <elementProp name="protocols" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${protocols}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">protocols</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">//192.168.23.173:26001/cps/service/cms/getLivePlayInfo?</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion（判断status）" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import java.io.IOException; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 

String requestToApi = SampleResult.getSamplerData(); 
String responseFromApi = SampleResult.getResponseDataAsString(); 
String status = null; 

if ((responseFromApi).contains(vars.get(&quot;expectedResult&quot;))) { status = &quot;Passed&quot;; }
else {status = &quot;Failed&quot;;Failure=true;} 

vars.getObject(&quot;row&quot;).createCell(4).setCellValue(requestToApi); 
vars.getObject(&quot;row&quot;).createCell(5).setCellValue(responseFromApi); 
vars.getObject(&quot;row&quot;).createCell(7).setCellValue(status); 

String stopWhile = null; 
int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 
if (i &gt;= vars.getObject(&quot;book&quot;).getSheetAt(8).getLastRowNum()) { stopWhile = &quot;OK&quot;; vars.put(&quot;stopWhile&quot;,stopWhile); }

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler3（保存更新excel文件）" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

import java.text.SimpleDateFormat;
import java.util.Date;
try 
{ 
	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	vars.getObject(&quot;book&quot;).write(out); 
	vars.getObject(&quot;book&quot;).close();
	
} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

//try 
//{ 
//	Date day=new Date();    
  //   String fileName = new SimpleDateFormat(&quot;&apos;Total_Request&apos;yyyyMMddHHmm&apos;.xlsx&apos;&quot;).format(new Date());
//	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileDate}&quot;+fileName)); 
//	vars.getObject(&quot;book&quot;).write(out); 
//	vars.getObject(&quot;book&quot;).close();
	
//} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

SampleResult.setIgnore();</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="10.getLivePlayInfos" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="pathToFile" elementType="Argument">
              <stringProp name="Argument.name">pathToFile</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\Total_Request.xlsx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pathToFileDate" elementType="Argument">
              <stringProp name="Argument.name">pathToFileDate</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（读取excel文件）" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

XSSFWorkbook book = &quot;&quot;; 
try { 
	InputStream inputStream = new FileInputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	book = new XSSFWorkbook(inputStream); 	
	inputStream.close(); 
} catch (Exception e) { 
		log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); 
} 
if (!book.equals(&quot;&quot;)) { 
	vars.putObject(&quot;book&quot;, book); 
} else { 
	SampleResult.setStopTestNow(true); 
}
SampleResult.setIgnore();

</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${stopWhile}&quot; != &quot;OK&quot;)} 
</stringProp>
        </WhileController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter（实现excel中多用例执行）" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">counter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">true</boolProp>
          </CounterConfig>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（定义excel中文件变量用于接口拼接）" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 

XSSFRow row = vars.getObject(&quot;book&quot;).getSheetAt(9).getRow(i); 
vars.putObject(&quot;row&quot;, row); 

	for (int j = 1; j &lt;= vars.getObject(&quot;book&quot;).getSheetAt(9).getRow(0).getLastCellNum(); j++) {
		if (row.getCell(j) == null) { 
			row.createCell(j).setCellValue(&quot;&quot;); 
		} 
	} 
	String liveids = row.getCell(1).toString(); 
	vars.put(&quot;liveids&quot;,liveids); 
	
	String plat = row.getCell(2).toString(); 
	vars.put(&quot;plat&quot;,plat); 
	
	String protocols = row.getCell(3).toString(); 
	vars.put(&quot;protocols&quot;,protocols); 

	String expectedResult = row.getCell(6).toString(); 
	vars.put(&quot;expectedResult&quot;,expectedResult);
SampleResult.setIgnore();</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request getLivePlayInfos" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="liveids" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${liveids}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">liveids</stringProp>
                </elementProp>
                <elementProp name="plat" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${plat}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">plat</stringProp>
                </elementProp>
                <elementProp name="protocols" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${protocols}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">protocols</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">//192.168.23.173:26001/cps/service/cms/getLivePlayInfos?</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion（判断status）" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import java.io.IOException; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 

String requestToApi = SampleResult.getSamplerData(); 
String responseFromApi = SampleResult.getResponseDataAsString(); 
String status = null; 

if ((responseFromApi).contains(vars.get(&quot;expectedResult&quot;))) { status = &quot;Passed&quot;; }
else {status = &quot;Failed&quot;;Failure=true;} 

vars.getObject(&quot;row&quot;).createCell(4).setCellValue(requestToApi); 
vars.getObject(&quot;row&quot;).createCell(5).setCellValue(responseFromApi); 
vars.getObject(&quot;row&quot;).createCell(7).setCellValue(status); 

String stopWhile = null; 
int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 
if (i &gt;= vars.getObject(&quot;book&quot;).getSheetAt(9).getLastRowNum()) { stopWhile = &quot;OK&quot;; vars.put(&quot;stopWhile&quot;,stopWhile); }

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler3（保存更新excel文件）" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

import java.text.SimpleDateFormat;
import java.util.Date;
try 
{ 
	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	vars.getObject(&quot;book&quot;).write(out); 
	vars.getObject(&quot;book&quot;).close();
	
} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

//try 
//{ 
//	Date day=new Date();    
  //   String fileName = new SimpleDateFormat(&quot;&apos;Total_Request&apos;yyyyMMddHHmm&apos;.xlsx&apos;&quot;).format(new Date());
//	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileDate}&quot;+fileName)); 
//	vars.getObject(&quot;book&quot;).write(out); 
//	vars.getObject(&quot;book&quot;).close();
	
//} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

SampleResult.setIgnore();</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="11.getLivePlaybackInfo" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="pathToFile" elementType="Argument">
              <stringProp name="Argument.name">pathToFile</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\Total_Request.xlsx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pathToFileDate" elementType="Argument">
              <stringProp name="Argument.name">pathToFileDate</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（读取excel文件）" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

XSSFWorkbook book = &quot;&quot;; 
try { 
	InputStream inputStream = new FileInputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	book = new XSSFWorkbook(inputStream); 	
	inputStream.close(); 
} catch (Exception e) { 
		log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); 
} 
if (!book.equals(&quot;&quot;)) { 
	vars.putObject(&quot;book&quot;, book); 
} else { 
	SampleResult.setStopTestNow(true); 
}
SampleResult.setIgnore();

</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${stopWhile}&quot; != &quot;OK&quot;)} 
</stringProp>
        </WhileController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter（实现excel中多用例执行）" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">counter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">true</boolProp>
          </CounterConfig>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（定义excel中文件变量用于接口拼接）" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 

XSSFRow row = vars.getObject(&quot;book&quot;).getSheetAt(10).getRow(i); 
vars.putObject(&quot;row&quot;, row); 

	for (int j = 1; j &lt;= vars.getObject(&quot;book&quot;).getSheetAt(10).getRow(0).getLastCellNum(); j++) {
		if (row.getCell(j) == null) { 
			row.createCell(j).setCellValue(&quot;&quot;); 
		} 
	} 
	String liveid = row.getCell(1).toString(); 
	vars.put(&quot;liveid&quot;,liveid); 

	String pid = row.getCell(2).toString(); 
	vars.put(&quot;pid&quot;,pid); 

	String plat = row.getCell(3).toString(); 
	vars.put(&quot;plat&quot;,plat); 
	
	String protocols = row.getCell(4).toString(); 
	vars.put(&quot;protocols&quot;,protocols); 

	String startTime = row.getCell(5).toString(); 
	vars.put(&quot;startTime&quot;,startTime); 

	String endTime = row.getCell(6).toString(); 
	vars.put(&quot;endTime&quot;,endTime); 

	String expectedResult = row.getCell(10).toString(); 
	vars.put(&quot;expectedResult&quot;,expectedResult);
SampleResult.setIgnore();</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request getLivePlaybackInfo" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="liveid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${liveid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">liveid</stringProp>
                </elementProp>
                <elementProp name="pid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${pid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">pid</stringProp>
                </elementProp>
                <elementProp name="plat" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${plat}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">plat</stringProp>
                </elementProp>
                <elementProp name="protocols" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${protocols}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">protocols</stringProp>
                </elementProp>
                <elementProp name="startTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${startTime}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">startTime</stringProp>
                </elementProp>
                <elementProp name="endTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${endTime}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">endTime</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">//192.168.23.173:26001/cps/service/cms/getLivePlaybackInfo?</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion（判断status）" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import java.io.IOException; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 

String requestToApi = SampleResult.getSamplerData(); 
String responseFromApi = SampleResult.getResponseDataAsString(); 
String status = null; 

if ((responseFromApi).contains(vars.get(&quot;expectedResult&quot;))) { status = &quot;Passed&quot;; }
else {status = &quot;Failed&quot;;Failure=true;} 

vars.getObject(&quot;row&quot;).createCell(7).setCellValue(requestToApi); 
vars.getObject(&quot;row&quot;).createCell(8).setCellValue(responseFromApi); 
vars.getObject(&quot;row&quot;).createCell(10).setCellValue(status); 

String stopWhile = null; 
int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 
if (i &gt;= vars.getObject(&quot;book&quot;).getSheetAt(10).getLastRowNum()) { stopWhile = &quot;OK&quot;; vars.put(&quot;stopWhile&quot;,stopWhile); }

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler3（保存更新excel文件）" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

import java.text.SimpleDateFormat;
import java.util.Date;
try 
{ 
	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	vars.getObject(&quot;book&quot;).write(out); 
	vars.getObject(&quot;book&quot;).close();
	
} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

//try 
//{ 
//	Date day=new Date();    
  //   String fileName = new SimpleDateFormat(&quot;&apos;Total_Request&apos;yyyyMMddHHmm&apos;.xlsx&apos;&quot;).format(new Date());
//	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileDate}&quot;+fileName)); 
//	vars.getObject(&quot;book&quot;).write(out); 
//	vars.getObject(&quot;book&quot;).close();
	
//} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

SampleResult.setIgnore();</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="12.getLivePrograms" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="pathToFile" elementType="Argument">
              <stringProp name="Argument.name">pathToFile</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\Total_Request.xlsx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pathToFileDate" elementType="Argument">
              <stringProp name="Argument.name">pathToFileDate</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（读取excel文件）" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

XSSFWorkbook book = &quot;&quot;; 
try { 
	InputStream inputStream = new FileInputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	book = new XSSFWorkbook(inputStream); 	
	inputStream.close(); 
} catch (Exception e) { 
		log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); 
} 
if (!book.equals(&quot;&quot;)) { 
	vars.putObject(&quot;book&quot;, book); 
} else { 
	SampleResult.setStopTestNow(true); 
}
SampleResult.setIgnore();

</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${stopWhile}&quot; != &quot;OK&quot;)} 
</stringProp>
        </WhileController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter（实现excel中多用例执行）" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">counter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">true</boolProp>
          </CounterConfig>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（定义excel中文件变量用于接口拼接）" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 

XSSFRow row = vars.getObject(&quot;book&quot;).getSheetAt(11).getRow(i); 
vars.putObject(&quot;row&quot;, row); 

	for (int j = 1; j &lt;= vars.getObject(&quot;book&quot;).getSheetAt(11).getRow(0).getLastCellNum(); j++) {
		if (row.getCell(j) == null) { 
			row.createCell(j).setCellValue(&quot;&quot;); 
		} 
	} 
	String liveid = row.getCell(1).toString(); 
	vars.put(&quot;liveid&quot;,liveid); 

	String date = row.getCell(2).toString(); 
	vars.put(&quot;date&quot;,date); 

	String expectedResult = row.getCell(5).toString(); 
	vars.put(&quot;expectedResult&quot;,expectedResult);
SampleResult.setIgnore();
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request getLivePrograms" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="liveid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${liveid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">liveid</stringProp>
                </elementProp>
                <elementProp name="date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${date}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">date</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">//192.168.23.173:26001/cps/service/cms/getLivePrograms?</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion（判断status）" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import java.io.IOException; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 

String requestToApi = SampleResult.getSamplerData(); 
String responseFromApi = SampleResult.getResponseDataAsString(); 
String status = null; 

if ((responseFromApi).contains(vars.get(&quot;expectedResult&quot;))) { status = &quot;Passed&quot;; }
else {status = &quot;Failed&quot;;Failure=true;} 

vars.getObject(&quot;row&quot;).createCell(3).setCellValue(requestToApi); 
vars.getObject(&quot;row&quot;).createCell(4).setCellValue(responseFromApi); 
vars.getObject(&quot;row&quot;).createCell(6).setCellValue(status); 

String stopWhile = null; 
int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 
if (i &gt;= vars.getObject(&quot;book&quot;).getSheetAt(11).getLastRowNum()) { stopWhile = &quot;OK&quot;; vars.put(&quot;stopWhile&quot;,stopWhile); }

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler3（保存更新excel文件）" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

import java.text.SimpleDateFormat;
import java.util.Date;
try 
{ 
	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	vars.getObject(&quot;book&quot;).write(out); 
	vars.getObject(&quot;book&quot;).close();
	
} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

//try 
//{ 
//	Date day=new Date();    
  //   String fileName = new SimpleDateFormat(&quot;&apos;Total_Request&apos;yyyyMMddHHmm&apos;.xlsx&apos;&quot;).format(new Date());
//	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileDate}&quot;+fileName)); 
//	vars.getObject(&quot;book&quot;).write(out); 
//	vars.getObject(&quot;book&quot;).close();
	
//} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

SampleResult.setIgnore();</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="13.getLivePlayingPrograms" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="pathToFile" elementType="Argument">
              <stringProp name="Argument.name">pathToFile</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\Total_Request.xlsx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pathToFileDate" elementType="Argument">
              <stringProp name="Argument.name">pathToFileDate</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（读取excel文件）" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

XSSFWorkbook book = &quot;&quot;; 
try { 
	InputStream inputStream = new FileInputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	book = new XSSFWorkbook(inputStream); 	
	inputStream.close(); 
} catch (Exception e) { 
		log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); 
} 
if (!book.equals(&quot;&quot;)) { 
	vars.putObject(&quot;book&quot;, book); 
} else { 
	SampleResult.setStopTestNow(true); 
}
SampleResult.setIgnore();

</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${stopWhile}&quot; != &quot;OK&quot;)} 
</stringProp>
        </WhileController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter（实现excel中多用例执行）" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">counter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">true</boolProp>
          </CounterConfig>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（定义excel中文件变量用于接口拼接）" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 

XSSFRow row = vars.getObject(&quot;book&quot;).getSheetAt(12).getRow(i); 
vars.putObject(&quot;row&quot;, row); 

	for (int j = 1; j &lt;= vars.getObject(&quot;book&quot;).getSheetAt(12).getRow(0).getLastCellNum(); j++) {
		if (row.getCell(j) == null) { 
			row.createCell(j).setCellValue(&quot;&quot;); 
		} 
	} 
	String liveids = row.getCell(1).toString(); 
	vars.put(&quot;liveids&quot;,liveids); 

	String expectedResult = row.getCell(4).toString(); 
	vars.put(&quot;expectedResult&quot;,expectedResult);

SampleResult.setIgnore();</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request getLivePlayingPrograms" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="liveids" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${liveids}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">liveids</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">//192.168.23.173:26001/cps/service/cms/getLivePlayingPrograms?</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion（判断status）" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import java.io.IOException; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 

String requestToApi = SampleResult.getSamplerData(); 
String responseFromApi = SampleResult.getResponseDataAsString(); 
String status = null; 

if ((responseFromApi).contains(vars.get(&quot;expectedResult&quot;))) { status = &quot;Passed&quot;; }
else {status = &quot;Failed&quot;;Failure=true;} 

vars.getObject(&quot;row&quot;).createCell(2).setCellValue(requestToApi); 
vars.getObject(&quot;row&quot;).createCell(3).setCellValue(responseFromApi); 
vars.getObject(&quot;row&quot;).createCell(5).setCellValue(status); 

String stopWhile = null; 
int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 
if (i &gt;= vars.getObject(&quot;book&quot;).getSheetAt(12).getLastRowNum()) { stopWhile = &quot;OK&quot;; vars.put(&quot;stopWhile&quot;,stopWhile); }

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler3（保存更新excel文件）" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

import java.text.SimpleDateFormat;
import java.util.Date;
try 
{ 
	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	vars.getObject(&quot;book&quot;).write(out); 
	vars.getObject(&quot;book&quot;).close();
	
} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

//try 
//{ 
//	Date day=new Date();    
  //   String fileName = new SimpleDateFormat(&quot;&apos;Total_Request&apos;yyyyMMddHHmm&apos;.xlsx&apos;&quot;).format(new Date());
//	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileDate}&quot;+fileName)); 
//	vars.getObject(&quot;book&quot;).write(out); 
//	vars.getObject(&quot;book&quot;).close();
	
//} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

SampleResult.setIgnore();</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="14.getLiveProgramFee" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="pathToFile" elementType="Argument">
              <stringProp name="Argument.name">pathToFile</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\Total_Request.xlsx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pathToFileDate" elementType="Argument">
              <stringProp name="Argument.name">pathToFileDate</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（读取excel文件）" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

XSSFWorkbook book = &quot;&quot;; 
try { 
	InputStream inputStream = new FileInputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	book = new XSSFWorkbook(inputStream); 	
	inputStream.close(); 
} catch (Exception e) { 
		log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); 
} 
if (!book.equals(&quot;&quot;)) { 
	vars.putObject(&quot;book&quot;, book); 
} else { 
	SampleResult.setStopTestNow(true); 
}
SampleResult.setIgnore();

</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${stopWhile}&quot; != &quot;OK&quot;)} 
</stringProp>
        </WhileController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter（实现excel中多用例执行）" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">counter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">true</boolProp>
          </CounterConfig>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（定义excel中文件变量用于接口拼接）" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 

XSSFRow row = vars.getObject(&quot;book&quot;).getSheetAt(13).getRow(i); 
vars.putObject(&quot;row&quot;, row); 

	for (int j = 1; j &lt;= vars.getObject(&quot;book&quot;).getSheetAt(13).getRow(0).getLastCellNum(); j++) {
		if (row.getCell(j) == null) { 
			row.createCell(j).setCellValue(&quot;&quot;); 
		} 
	} 
	String liveid = row.getCell(1).toString(); 
	vars.put(&quot;liveid&quot;,liveid); 

	String startTime = row.getCell(2).toString(); 
	vars.put(&quot;startTime&quot;,startTime); 

	String endTime = row.getCell(3).toString(); 
	vars.put(&quot;endTime&quot;,endTime); 

	String expectedResult = row.getCell(6).toString(); 
	vars.put(&quot;expectedResult&quot;,expectedResult);
SampleResult.setIgnore();


</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request getLiveProgramFee" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="liveid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${liveid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">liveid</stringProp>
                </elementProp>
                <elementProp name="startTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${startTime}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">startTime</stringProp>
                </elementProp>
                <elementProp name="endTime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${endTime}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">endTime</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">//192.168.23.173:26001/cps/service/cms/getLiveProgramFee?</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion（判断status）" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import java.io.IOException; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 

String requestToApi = SampleResult.getSamplerData(); 
String responseFromApi = SampleResult.getResponseDataAsString(); 
String status = null; 

if ((responseFromApi).contains(vars.get(&quot;expectedResult&quot;))) { status = &quot;Passed&quot;; }
else {status = &quot;Failed&quot;;Failure=true;} 

vars.getObject(&quot;row&quot;).createCell(4).setCellValue(requestToApi); 
vars.getObject(&quot;row&quot;).createCell(5).setCellValue(responseFromApi); 
vars.getObject(&quot;row&quot;).createCell(7).setCellValue(status); 

String stopWhile = null; 
int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 
if (i &gt;= vars.getObject(&quot;book&quot;).getSheetAt(13).getLastRowNum()) { stopWhile = &quot;OK&quot;; vars.put(&quot;stopWhile&quot;,stopWhile); }

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler3（保存更新excel文件）" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

import java.text.SimpleDateFormat;
import java.util.Date;
try 
{ 
	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	vars.getObject(&quot;book&quot;).write(out); 
	vars.getObject(&quot;book&quot;).close();
	
} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

//try 
//{ 
//	Date day=new Date();    
  //   String fileName = new SimpleDateFormat(&quot;&apos;Total_Request&apos;yyyyMMddHHmm&apos;.xlsx&apos;&quot;).format(new Date());
//	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileDate}&quot;+fileName)); 
//	vars.getObject(&quot;book&quot;).write(out); 
//	vars.getObject(&quot;book&quot;).close();
	
//} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

SampleResult.setIgnore();</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="15.getContentInfo" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="pathToFile" elementType="Argument">
              <stringProp name="Argument.name">pathToFile</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\Total_Request.xlsx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pathToFileDate" elementType="Argument">
              <stringProp name="Argument.name">pathToFileDate</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（读取excel文件）" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

XSSFWorkbook book = &quot;&quot;; 
try { 
	InputStream inputStream = new FileInputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	book = new XSSFWorkbook(inputStream); 	
	inputStream.close(); 
} catch (Exception e) { 
		log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); 
} 
if (!book.equals(&quot;&quot;)) { 
	vars.putObject(&quot;book&quot;, book); 
} else { 
	SampleResult.setStopTestNow(true); 
}
SampleResult.setIgnore();

</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${stopWhile}&quot; != &quot;OK&quot;)} 
</stringProp>
        </WhileController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter（实现excel中多用例执行）" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">counter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（定义excel中文件变量用于接口拼接）" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 

XSSFRow row = vars.getObject(&quot;book&quot;).getSheetAt(14).getRow(i); 
vars.putObject(&quot;row&quot;, row); 

	for (int j = 1; j &lt;= vars.getObject(&quot;book&quot;).getSheetAt(14).getRow(0).getLastCellNum(); j++) {
		if (row.getCell(j) == null) { 
			row.createCell(j).setCellValue(&quot;&quot;); 
		} 
	} 

	String id = row.getCell(1).toString(); 
	vars.put(&quot;id&quot;,id); 
	
	String siteFolderId = row.getCell(2).toString(); 
	vars.put(&quot;siteFolderId&quot;,siteFolderId); 
	
	String partnerIds = row.getCell(3).toString(); 
	vars.put(&quot;partnerIds&quot;,partnerIds); 

	String attrs = row.getCell(4).toString(); 
	vars.put(&quot;attrs&quot;,attrs); 
	
	String expectedResult = row.getCell(7).toString(); 
	vars.put(&quot;expectedResult&quot;,expectedResult);

	SampleResult.setIgnore();</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request getContentInfo" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">id</stringProp>
                </elementProp>
                <elementProp name="siteFolderId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${siteFolderId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">siteFolderId</stringProp>
                </elementProp>
                <elementProp name="partnerIds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${partnerIds}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">partnerIds</stringProp>
                </elementProp>
                <elementProp name="attrs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${attrs}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">attrs</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">//192.168.23.173:26001/cps/service/cms/getContentInfo?</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion（判断status）" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import java.io.IOException; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 

String requestToApi = SampleResult.getSamplerData(); 
String responseFromApi = SampleResult.getResponseDataAsString(); 
String status = null; 

if ((responseFromApi).contains(vars.get(&quot;expectedResult&quot;))) { status = &quot;Passed&quot;; }
else {status = &quot;Failed&quot;;Failure=true;} 

vars.getObject(&quot;row&quot;).createCell(5).setCellValue(requestToApi); 
vars.getObject(&quot;row&quot;).createCell(6).setCellValue(responseFromApi); 
vars.getObject(&quot;row&quot;).createCell(8).setCellValue(status); 

String stopWhile = null; 
int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 
if (i &gt;= vars.getObject(&quot;book&quot;).getSheetAt(14).getLastRowNum()) { stopWhile = &quot;OK&quot;; vars.put(&quot;stopWhile&quot;,stopWhile); }

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler3（保存更新excel文件）" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

import java.text.SimpleDateFormat;
import java.util.Date;
try 
{ 
	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	vars.getObject(&quot;book&quot;).write(out); 
	vars.getObject(&quot;book&quot;).close();
	
} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

//try 
//{ 
//	Date day=new Date();    
  //   String fileName = new SimpleDateFormat(&quot;&apos;Total_Request&apos;yyyyMMddHHmm&apos;.xlsx&apos;&quot;).format(new Date());
//	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileDate}&quot;+fileName)); 
//	vars.getObject(&quot;book&quot;).write(out); 
//	vars.getObject(&quot;book&quot;).close();
	
//} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }

SampleResult.setIgnore();</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="16.getContentInfos" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="pathToFile" elementType="Argument">
              <stringProp name="Argument.name">pathToFile</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\Total_Request.xlsx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pathToFileDate" elementType="Argument">
              <stringProp name="Argument.name">pathToFileDate</stringProp>
              <stringProp name="Argument.value">E:\\apache-jmeter-5.0\\apache-jmeter-5.0\\docs\\api\\excel\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（读取excel文件）" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

XSSFWorkbook book = &quot;&quot;; 
try { 
	InputStream inputStream = new FileInputStream(new File(&quot;${pathToFile}&quot;)); 
	book = new XSSFWorkbook(inputStream); 	
	inputStream.close(); 
} catch (Exception e) { 
		log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); 
} 
if (!book.equals(&quot;&quot;)) { 
	vars.putObject(&quot;book&quot;, book); 
} else { 
	SampleResult.setStopTestNow(true); 
}
SampleResult.setIgnore();

</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${stopWhile}&quot; != &quot;OK&quot;)} 
</stringProp>
        </WhileController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter（实现excel中多用例执行）" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">counter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（定义excel中文件变量用于接口拼接）" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 

XSSFRow row = vars.getObject(&quot;book&quot;).getSheetAt(15).getRow(i); 
vars.putObject(&quot;row&quot;, row); 

	for (int j = 1; j &lt;= vars.getObject(&quot;book&quot;).getSheetAt(15).getRow(0).getLastCellNum(); j++) {
		if (row.getCell(j) == null) { 
			row.createCell(j).setCellValue(&quot;&quot;); 
		} 
	} 

	String ids = row.getCell(1).toString(); 
	vars.put(&quot;ids&quot;,ids); 

	String plats = row.getCell(2).toString(); 
	vars.put(&quot;plats&quot;,plats); 
	
	String siteFolderId = row.getCell(3).toString(); 
	vars.put(&quot;siteFolderId&quot;,siteFolderId); 
	
	String attrs = row.getCell(4).toString(); 
	vars.put(&quot;attrs&quot;,attrs); 
	
	String expectedResult = row.getCell(7).toString(); 
	vars.put(&quot;expectedResult&quot;,expectedResult);

	SampleResult.setIgnore();</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request getContentInfos" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ids" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${ids}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ids</stringProp>
                </elementProp>
                <elementProp name="plats" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${plats}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">plats</stringProp>
                </elementProp>
                <elementProp name="siteFolderId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${siteFolderId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">siteFolderId</stringProp>
                </elementProp>
                <elementProp name="attrs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${attrs}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">attrs</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">//192.168.23.173:26001/cps/service/cms/getContentInfos?</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion（判断status）" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import java.io.IOException; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 

String requestToApi = SampleResult.getSamplerData(); 
String responseFromApi = SampleResult.getResponseDataAsString(); 
String status = null; 

if ((responseFromApi).contains(vars.get(&quot;expectedResult&quot;))) { status = &quot;Passed&quot;; }
else { status = &quot;Failed&quot;;} 
//else {status = &quot;Failed&quot;;Failure=true;} 

vars.getObject(&quot;row&quot;).createCell(5).setCellValue(requestToApi); 
vars.getObject(&quot;row&quot;).createCell(6).setCellValue(responseFromApi); 
vars.getObject(&quot;row&quot;).createCell(8).setCellValue(status); 

String stopWhile = null; 
int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 
if (i &gt;= vars.getObject(&quot;book&quot;).getSheetAt(15).getLastRowNum()) { stopWhile = &quot;OK&quot;; vars.put(&quot;stopWhile&quot;,stopWhile); }

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler3（保存更新excel文件）" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

import java.text.SimpleDateFormat;
import java.util.Date;
try 
{ 
	Date day=new Date();    
     String fileName = new SimpleDateFormat(&quot;&apos;Total_Request&apos;yyyyMMddHHmm&apos;.xlsx&apos;&quot;).format(new Date());
     //System.out.println(fileName);
	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileDate}&quot;+fileName)); 
	//FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFile}&quot;)); 
	vars.getObject(&quot;book&quot;).write(out); 
	vars.getObject(&quot;book&quot;).close();
	
} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }
SampleResult.setIgnore();</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="16.getContentInfos" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </PostThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（读取excel文件）" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

XSSFWorkbook book = &quot;&quot;; 
try { 
	InputStream inputStream = new FileInputStream(new File(&quot;${pathToFileLinux}&quot;)); 
	book = new XSSFWorkbook(inputStream); 	
	inputStream.close(); 
} catch (Exception e) { 
		log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); 
} 
if (!book.equals(&quot;&quot;)) { 
	vars.putObject(&quot;book&quot;, book); 
} else { 
	SampleResult.setStopTestNow(true); 
}
SampleResult.setIgnore();

</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${stopWhile}&quot; != &quot;OK&quot;)} 
</stringProp>
        </WhileController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter（实现excel中多用例执行）" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">counter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler（定义excel中文件变量用于接口拼接）" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 

XSSFRow row = vars.getObject(&quot;book&quot;).getSheetAt(15).getRow(i); 
vars.putObject(&quot;row&quot;, row); 

	for (int j = 1; j &lt;= vars.getObject(&quot;book&quot;).getSheetAt(15).getRow(0).getLastCellNum(); j++) {
		if (row.getCell(j) == null) { 
			row.createCell(j).setCellValue(&quot;&quot;); 
		} 
	} 

	String ids = row.getCell(1).toString(); 
	vars.put(&quot;ids&quot;,ids); 

	String plats = row.getCell(2).toString(); 
	vars.put(&quot;plats&quot;,plats); 
	
	String siteFolderId = row.getCell(3).toString(); 
	vars.put(&quot;siteFolderId&quot;,siteFolderId); 
	
	String attrs = row.getCell(4).toString(); 
	vars.put(&quot;attrs&quot;,attrs); 
	
	String expectedResult = row.getCell(7).toString(); 
	vars.put(&quot;expectedResult&quot;,expectedResult);

	SampleResult.setIgnore();</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request getContentInfos" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ids" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${ids}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ids</stringProp>
                </elementProp>
                <elementProp name="plats" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${plats}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">plats</stringProp>
                </elementProp>
                <elementProp name="siteFolderId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${siteFolderId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">siteFolderId</stringProp>
                </elementProp>
                <elementProp name="attrs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${attrs}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">attrs</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">//192.168.23.173:26001/cps/service/cms/getContentInfos?</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion（判断status）" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import java.io.IOException; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 

String requestToApi = SampleResult.getSamplerData(); 
String responseFromApi = SampleResult.getResponseDataAsString(); 
String status = null; 

if ((responseFromApi).contains(vars.get(&quot;expectedResult&quot;))) { status = &quot;Passed&quot;; }
else { status = &quot;Failed&quot;;} 
//else {status = &quot;Failed&quot;;Failure=true;} 

vars.getObject(&quot;row&quot;).createCell(5).setCellValue(requestToApi); 
vars.getObject(&quot;row&quot;).createCell(6).setCellValue(responseFromApi); 
vars.getObject(&quot;row&quot;).createCell(8).setCellValue(status); 

String stopWhile = null; 
int i = Integer.parseInt(vars.get(&quot;counter&quot;)); 
if (i &gt;= vars.getObject(&quot;book&quot;).getSheetAt(15).getLastRowNum()) { stopWhile = &quot;OK&quot;; vars.put(&quot;stopWhile&quot;,stopWhile); }

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler3（保存更新excel文件）" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.poi.xssf.usermodel.XSSFWorkbook; 
import org.apache.poi.xssf.usermodel.XSSFSheet; 
import org.apache.poi.xssf.usermodel.XSSFRow; 
import java.io.*; 

import java.text.SimpleDateFormat;
import java.util.Date;
try 
{ 
	Date day=new Date();    
     String fileName = new SimpleDateFormat(&quot;&apos;Total_Request&apos;yyyyMMddHHmm&apos;.xlsx&apos;&quot;).format(new Date());
     //System.out.println(fileName);
	FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFileDateLinux}&quot;+fileName)); 
	//FileOutputStream out = new FileOutputStream(new File(&quot;${pathToFile}&quot;)); 
	vars.getObject(&quot;book&quot;).write(out); 
	vars.getObject(&quot;book&quot;).close();
	
} catch (Exception e) { log.info(&quot;!!!!!!!!&quot; + e.getMessage() + &quot;!!!!!!!!!!!!!!!&quot;); }
SampleResult.setIgnore();</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
